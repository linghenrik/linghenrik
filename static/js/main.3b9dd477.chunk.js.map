{"version":3,"sources":["News.js","serviceWorker.js","index.js"],"names":["NEWS_LIST_QUERY","gql","_templateObject","NEWS_ITEM_QUERY","_templateObject2","useStyles","makeStyles","theme","createStyles","card","maxWidth","margin","media","height","paddingTop","News","props","back","react_default","a","createElement","react_router_dom","to","Button","size","color","More","id","Source","url","href","classes","match","params","react_apollo_esm","query","variables","_ref","loading","error","data","concat","message","Card","className","key","newsItem","CardMedia","image","img","title","CardContent","Typography","gutterBottom","variant","component","paragraph","content","CardActions","limit","skip","_ref2","newsList","rows","map","news","Boolean","window","location","hostname","client","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","App","state","items","Array","from","length","fetchMoreData","_this","setState","align","lib_default","dataLength","this","next","hasMore","loader","Container","i","index","Grid","container","justify","item","React","Component","routing","basename","process","react_router","exact","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b9dd477.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {Link} from 'react-router-dom';\n\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\n\n\nconst NEWS_LIST_QUERY = gql`\n  query newsList($skip: Int! $limit: Int!) {\n    newsList(skip: $skip  limit: $limit) {\n\t    totalRows\n\t    rows {\n\t      id\n\t      title\n\t      url\n\t      img\n\t      content\n\t    }\n\t  }\n  }\n`;\n\nconst NEWS_ITEM_QUERY = gql`\n  query newsItem($id: ID !) {\n    newsItem(id: $id ) {\n    \tid\n\t    title\n\t    content\n\t    img\n\t    url\n\t  }\n  }\n`;\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      maxWidth: 345,\n      margin: '2%',\n    },\n    media: {\n      height: 0,\n      paddingTop: '56.25%', // 16:9\n    }\n  }),\n);\n\n\nexport default function News(props) {\n\n\n\tconst back = <Link to=\"/\"><Button size=\"small\" color=\"primary\">\n\t                            Back\n\t                          </Button></Link>;\n\n\tfunction More(props) {\n\t  const id = props.id;\n\t  return <Link to={\"/news/\"+id}><Button size=\"small\" color=\"primary\">\n\t                            Read More\n\t                          </Button></Link>;\n\t}\n\n\tfunction Source(props) {\n\t  const url = props.url;\n\t  return <a href={url}><Button size=\"small\" color=\"primary\">\n\t                            Source\n\t                          </Button></a>;\n\t}                         \n\n\t  const classes = useStyles();\n\n\n\t  if (props.match ) {\n\t  \tvar id = props.match.params.id;\n\t  \t\n\t  \treturn (\n\t    <Query query={NEWS_ITEM_QUERY} variables={{id}} >\n\t\t    {({ loading, error, data }) => {\n\t\t      if (loading) return \"Loading...\";\n\t\t      if (error) return `Error! ${error.message}`;\n\n\t\t      if (data) return (\n\t\t                <Card className={classes.card} key = {data.newsItem.id} >\n\t\t                  <CardMedia \n\t\t                  \tclassName={classes.media}\n\n\t\t                    image={data.newsItem.img}\n\t\t                    title=\"News image\"\n\t\t                  />\n\t\t                  <CardContent>\n\t\t                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n\t\t                      {data.newsItem.title}\n\t\t                    </Typography>\n\t\t                    <Typography paragraph variant=\"body2\" color=\"textSecondary\">\n\t                                  {data.newsItem.content}\n\t                                </Typography>\n\t\t                  </CardContent>\n\t\t                  <CardActions>\n\t                          <Source url={data.newsItem.url} />\n\t                          {back}\n\t                       </CardActions>\n\t\t                </Card>\n\t\t      );\n\t\t    }}\n\t\t  </Query>\n\t  \t);\n\t  } else if (props.limit ) {\n\t  var skip = props.skip;\n\t  var limit = props.limit;\n\t  \treturn (\n\t    <Query query={NEWS_LIST_QUERY} variables={{skip, limit}} >\n\t\t    {({ loading, error, data }) => {\n\t\t      if (loading) return \"Loading...\";\n\t\t      if (error) return `Error! ${error.message}`;\n\n\t\t      if (data) return (\n\t\t          data.newsList.rows.map(news => (\n\t\t                <Card className={classes.card} key={news.id}>\n\t\t                  <CardMedia \n\t\t                  \tclassName={classes.media}\n\t\t                    image={news.img}\n\t\t                    title=\"News image\"\n\t\t                  />\n\t\t                  <CardContent>\n\t\t                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n\t\t                      {news.title}\n\t\t                    </Typography>\n\t\t                  </CardContent>\n\t\t                  <CardActions>\n\t                          <Source url={news.url} />\n\t                          <More id={news.id} />\n\t                        </CardActions>\n\t\t                </Card>\n\t\t          ))\n\t\t      );\n\t\t    }}\n\t\t  </Query>\n\t  \t);\n\t  }\n\n\t  \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from 'react-apollo';\nimport News from './News'; \nimport * as serviceWorker from './serviceWorker';\nimport Container from '@material-ui/core/Container';\n\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"https://news-reader.stagnationlab.dev/graphql\" }),\n  cache: new InMemoryCache(),\n});\n\n\nconst Notfound = () => <h1>Not found ....</h1>;\n \n\nclass App extends React.Component {\n\n  state = {\n    items: Array.from({ length: 3 })\n  };\n\n\n  fetchMoreData = () => {\n      this.setState({\n        items: this.state.items.concat(Array.from({ length: 2 }))\n      });\n\n  };\n\n  render() {\n    return (\n      <div>\n        <Typography variant=\"h3\" align=\"center\">All the good news for you</Typography>\n        <hr />\n        <InfiniteScroll\n          dataLength={this.state.items.length}\n          next={this.fetchMoreData}\n          hasMore={true}\n          loader={<Typography align=\"center\" variant=\"h4\">Loading...</Typography>}\n        >\t<Container >\n        \t{this.state.items.map((i, index) => (\n        \t\t<Grid container key={index} justify=\"center\" >\n\t\t        \t<Grid item>\n\n\t\t\t\t          <News skip = {index} limit={1} />\n\n\t\t\t        </Grid>\n\t\t        </Grid>\n\t\t    ))}\n\t\t    </Container>\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nconst routing = (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div>\n    \t<Switch>\n\t      <Route exact path=\"/\" component={App} />\n\t      <Route path=\"/news/:id\" component={News} />\n\t      <Route component={Notfound} />\n\t\t</Switch>\n    </div>\n  </Router>\n)\n\nReactDOM.render(<ApolloProvider client={client}>{routing}</ApolloProvider>, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}